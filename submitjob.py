#!/usr/bin/env python3
"""
submitjob.py  â€“  helper to create (and optionally qsub) a PBS script
                that runs ./wsp-mpi on the Latedays cluster.

Compatible with Python 3.x (no functional changes from the 2.x version).
"""
import sys
import subprocess
import getopt
import random
from pathlib import Path

# ------------------------------- helper: usage -------------------------
def usage(name: str) -> None:
    print(f"""Usage: {name} -h -J -s NAME -p PROCS -a ARGS -r ROOT -d DIGITS
  -h         Print this message
  -J         Don't submit job (just generate command file)
  -s NAME    Root name of generated script (default "latedays")
  -p PROCS   Number of MPI ranks for mpirun   (default 1)
  -a ARGS    Argument string passed to ./wsp-mpi (quoted)
  -r ROOT    Root name of benchmark output file (informational)
  -d DIGITS  Length of random numeric suffix appended to names (default 4)
""")
    sys.exit(0)

# ------------------------------- globals -------------------------------
unique_id = ""          # filled once per invocation

# ------------------------------- helper: random ID ---------------------
def generate_id(digits: int) -> str:
    return "".join(random.choice("0123456789") for _ in range(digits))

# ------------------------------- helper: build filenames --------------
def make_name(root: str, ext: str) -> str:
    return f"{root}-{unique_id}.{ext}" if unique_id else f"{root}.{ext}"

# ------------------------------- script generator ----------------------
def generate_script(script: Path,
                    procs: int,
                    arg_string: str,
                    output_name: str) -> bool:
    """Write a PBS shell script that runs wsp-mpi with <procs> ranks."""
    try:
        with script.open("w") as f:
            f.write("#!/bin/bash\n"
                    "# Auto-generated by submitjob.py\n\n"
                    "#PBS -l walltime=0:30:00         # 30-minute limit\n"
                    "#PBS -l nodes=1:ppn=24           # single 24-core node\n\n"
                    "cd \"$PBS_O_WORKDIR\"\n\n"
                    f"# Run program; summary will appear in {output_name}\n"
                    f"mpirun -np {procs} ./wsp-mpi {arg_string}\n")
        script.chmod(0o755)
        return True
    except OSError as e:
        print(f"Error: couldn't write script '{script}': {e}")
        return False

# ------------------------------- qsub wrapper --------------------------
def submit(script: Path) -> None:
    """Call qsub on the generated script."""
    cmd = ["qsub", str(script)]
    try:
        subprocess.run(cmd, check=True)
    except (OSError, subprocess.CalledProcessError) as e:
        print(f"Error: qsub failed: {e}")

# ------------------------------- main driver ---------------------------
def run(argv):
    global unique_id
    submit_job   = True           # invoke qsub unless -J
    script_root  = "latedays"
    script_ext   = "sh"
    procs        = 1
    arg_string   = ""
    output_root  = "benchmark"
    output_ext   = "out"
    digits       = 4

    optlist, _ = getopt.getopt(argv, "hJp:s:a:r:d:")
    for opt, val in optlist:
        if opt == "-h":
            usage(sys.argv[0])
        elif opt == "-J":
            submit_job = False
        elif opt == "-s":
            script_root = val
        elif opt == "-p":
            procs = int(val)
        elif opt == "-a":
            arg_string = val
        elif opt == "-r":
            output_root = val
        elif opt == "-d":
            digits = int(val)

    unique_id   = generate_id(digits)
    script_name = Path(make_name(script_root, script_ext))
    output_name = make_name(output_root, output_ext)

    if generate_script(script_name, procs, arg_string, output_name):
        print(f"Generated script {script_name}")
        if submit_job:
            submit(script_name)


if __name__ == "__main__":
    run(sys.argv[1:])
